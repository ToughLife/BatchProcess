{
  "name": "Batchprocess",
  "tagline": "",
  "body": "<<<<<<< HEAD\r\n\r\n# Batch processing - batch\r\n\r\n```batch``` allows you to execute many a bounch of commands in one command. Actually, it is\r\na string processing program to generate commands you needed.\r\n\r\n## Installation Instructions\r\n\r\nYou have to install [Python](https://www.python.org/) to get it work. The \r\nplatform we have tested on is python 2.7.5, so we recommand that for you.\r\n\r\nTo install ```batch```, you just copy ```batch.py``` to any folder that in you \r\n```PATH``` enviroment variable.\r\n\r\n## Basic Usage\r\n\r\nThe basic usage of ```batch``` is:\r\n\r\n```batch [options] user_command```\r\n\r\n`user_command`  include the actual commands  and the command within \r\n`batch`. A hello-world-example of  `batch` is:\r\n\r\n```batch mkdir hello(#g 1 6)```\r\n\r\nThis command will make 5 folder names from ```hello1```, ```hello2```... to \r\n```hello5``` in current folder. `(#g 1 6)` is a function in `batch` which functions\r\nlike\r\n```python\r\nrange(1, 6)\r\n```\r\nin python. It generates a list ranges from [1,6). Then \r\nActually, the commands being executed by the system is a group:\r\n\r\n    mkdir hello1 \r\n    mkdir hello2\r\n    mkdir hello3\r\n    mkdir hello4\r\n    mkdir hello5\r\n\r\nThere are two kinds of commands within ```batch``` which are:\r\n\r\n * **Variables**: All variables are begin `@` sign, _e.g._, `@1`,`@b1` etc. .The \r\n variables include user-defined variables and built-in variable. All the \r\n variables are generated\r\n by **Functions**.\r\n\r\n * **Functions**: The functions are in [s-expressions](https://en.wikipedia.org/wiki/S-expression).\r\nThe first arg in functions begin with `#`, like `#g` in the hello-world-example,\r\nindicating which function it is. The following args is the parametes of the function.\r\n**Some of the functions may define Variables**. Refer to [Function list](#fclist)\r\nfor more information.\r\n\r\n## Options\r\n* **-s**: just show commands other than execute it\r\n* **-d**: debug mode, `batch` will show most infomation that helps you debug your commands\r\n* **-p**: paralell execute mode, `batch` will execute the final command in parallel mode\r\n## Variable List\r\n\r\n## <a name=\"fclist\"/></a>Function List\r\n1. **`( )`**: The form of the function may seem to be very strange. Actually, this function just contac all the elements in the paratheses. The element may also be a list.\r\n<font color=#CC0000> **Note:**</font> \r\n+ The spaces between the elements is NOT ignored. \r\n+ The lists in the same pair of paratheses MUST be equal length.\r\n> Example:\r\n```python\r\n (a b c) => ['a',' b', ' c'], note the leading space of 2rd and 3th elements\r\n ((a)(b)(c)) => ['a','b','c']\r\n (a((d)(e))b) => ['adb','aeb']\r\n (a((1)(2))c((3)(4))) => ['a1c3','a2c4']\r\n```\r\n\r\n1. **`(#g lb ub [step])`** : Generate a list of numbers, from lower bound to upper bound (not included). `lb` and `ub` can be list (which must be equal length) which `#g` generate numbers in [`lb[0]`,`ub[0]`), [`lb[1]`,`ub[1]`)... `step` is an optional parameter, whose default value is 1.\r\n<font color=#CC0000> **Note:**</font> the step parameter now is NOT implemented yet!\r\n> Example:\r\n```python\r\n(#g 1 5) => ['1','2','3','4']\r\n(#g 1 5 2) => ['1','3']\r\n(#g (1 5) (3 8)) => ['1','2','5','6','7']\r\n```\r\n\r\n1. **`(#s varargs)`** : Execute system command and returns a list contains each line of the ouput of the command. varargs may be `string` or `list` or a composition of them. The spaces between them is not ignored.\r\n> Example:\r\n```python\r\n(#s mkdir ((a)(b))) => ['mkdir a', 'mkdir b']\r\n(#s cat(#g 1 3) (#g 1 3).txt) => ['cat1 1.txt', 'cat2 2.txt']\r\n(#s mkdir a\\(#g 1 3)\\b)=>['mkdir a\\1\\b', 'mkdir a\\2\\b']\r\n```\r\n\r\n1. **`(#e varargs)`** : Evaluate a python expression. \r\n> Example:\r\n```python\r\n(#s mkdir ((a)(b))) => ['mkdir a', 'mkdir b']\r\n(#s cat(#g 1 3) (#g 1 3).txt) => ['cat1 1.txt', 'cat2 2.txt']\r\n(#s mkdir a\\(#g 1 3)\\b)=>['mkdir a\\1\\b', 'mkdir a\\2\\b']\r\n```\r\n## More Examples\r\nIn all examples, we just show the commands generated by `batch`.\r\n\r\n1. `batch -s (#g 1 4)`  \r\n> Output:\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\n1. `batch -s (#m (#s cat a.txt)/abc(#g 1 4))`  \r\n> The content in `a.txt`:\r\n```\r\nabc\r\ndef\r\n```\r\n> The output is :\r\n```\r\nabc/abc1\r\nabc/abc2\r\nabc/abc3\r\ndef/abc1\r\ndef/abc2\r\ndef/abc3\r\n```\r\n\r\n1. `batch -s (#e \\\"frame%05d-%3d.jpg\\\"%__[(#g 1 3),(#g 501 503)]__)`\r\n> The output:\r\n```\r\nframe00001-501.jpg\r\nframe00002-502.jpg\r\n```\r\n\r\n1. `batch -s convert (#pf .*\\.\\w+) -resize 10% resized-@b.@e`\r\n> The files in current dir:\r\n```\r\na.jpg\r\nb.png\r\n```\r\n> The output:\r\n```\r\nconvert a.jpg -resize 10% resized-a.jpg\r\nconvert b.png -resize 10% resized-b.png\r\n```\r\n\r\n1. Super long but real example (you had better copy the following code into an editor to see the matchness of the parentheses):\r\n```\r\nbatch.py -s -d (#D try2 d)(#PS (#s (#PF @d\\(#m (#pd @d .*)((\\1)(&nbsn))) .*\\.[pngjpegPNGJPEG]+) identify @f\\@b.@e) __[\\w+]__x__[\\w+]__) convert wm.png -resize (#e \\\"%3.2f\\\"%__[min__[float__[@1]__,float__[@2]__]__/3543*100]__)% @f\\wm@b.png ^&^& composite -gravity center @f\\wm@b.png @f\\@b.@e @f\\@b.@e ^&^& del @f\\wm@b.png\r\n```\r\n\r\n> The output:\r\n```\r\nconvert a.jpg -resize 10% resized-a.jpg\r\nconvert b.png -resize 10% resized-b.png\r\n```\r\n convert wm.png -resize 5.28% try2\\101000404\\1\\wm01.png && composite -gravity ce\r\nnter try2\\101000404\\1\\wm01.png try2\\101000404\\1\\01.jpg try2\\101000404\\1\\01.jpg &\r\n& del try2\\101000404\\1\\wm01.png\r\n=======\r\nYou can render *LaTeX* mathematical expressions using **MathJax**, as on [math.stackexchange.com][1]:\r\n\r\nThe *Gamma function* satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral\r\n\r\n$$\r\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\r\n$$\r\n>>>>>>> origin/master\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}